// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file todo.proto (package todo, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message todo.Todo
 */
export class Todo extends Message<Todo> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string todo = 2;
   */
  todo = "";

  /**
   * @generated from field: string createdAt = 3;
   */
  createdAt = "";

  constructor(data?: PartialMessage<Todo>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "todo.Todo";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "todo", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "createdAt", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Todo {
    return new Todo().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Todo {
    return new Todo().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Todo {
    return new Todo().fromJsonString(jsonString, options);
  }

  static equals(a: Todo | PlainMessage<Todo> | undefined, b: Todo | PlainMessage<Todo> | undefined): boolean {
    return proto3.util.equals(Todo, a, b);
  }
}

/**
 * @generated from message todo.CreateTodoRequest
 */
export class CreateTodoRequest extends Message<CreateTodoRequest> {
  /**
   * @generated from field: string todo = 1;
   */
  todo = "";

  constructor(data?: PartialMessage<CreateTodoRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "todo.CreateTodoRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "todo", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateTodoRequest {
    return new CreateTodoRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateTodoRequest {
    return new CreateTodoRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateTodoRequest {
    return new CreateTodoRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateTodoRequest | PlainMessage<CreateTodoRequest> | undefined, b: CreateTodoRequest | PlainMessage<CreateTodoRequest> | undefined): boolean {
    return proto3.util.equals(CreateTodoRequest, a, b);
  }
}

/**
 * @generated from message todo.CreateTodoResponse
 */
export class CreateTodoResponse extends Message<CreateTodoResponse> {
  /**
   * @generated from field: todo.Todo todo = 1;
   */
  todo?: Todo;

  constructor(data?: PartialMessage<CreateTodoResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "todo.CreateTodoResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "todo", kind: "message", T: Todo },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateTodoResponse {
    return new CreateTodoResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateTodoResponse {
    return new CreateTodoResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateTodoResponse {
    return new CreateTodoResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CreateTodoResponse | PlainMessage<CreateTodoResponse> | undefined, b: CreateTodoResponse | PlainMessage<CreateTodoResponse> | undefined): boolean {
    return proto3.util.equals(CreateTodoResponse, a, b);
  }
}

/**
 * @generated from message todo.GetTodoListRequest
 */
export class GetTodoListRequest extends Message<GetTodoListRequest> {
  /**
   * @generated from field: optional string id = 1;
   */
  id?: string;

  /**
   * @generated from field: optional string q = 2;
   */
  q?: string;

  constructor(data?: PartialMessage<GetTodoListRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "todo.GetTodoListRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 2, name: "q", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetTodoListRequest {
    return new GetTodoListRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetTodoListRequest {
    return new GetTodoListRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetTodoListRequest {
    return new GetTodoListRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetTodoListRequest | PlainMessage<GetTodoListRequest> | undefined, b: GetTodoListRequest | PlainMessage<GetTodoListRequest> | undefined): boolean {
    return proto3.util.equals(GetTodoListRequest, a, b);
  }
}

/**
 * @generated from message todo.GetTodoListResponse
 */
export class GetTodoListResponse extends Message<GetTodoListResponse> {
  /**
   * @generated from field: int32 count = 1;
   */
  count = 0;

  /**
   * @generated from field: repeated todo.Todo todos = 2;
   */
  todos: Todo[] = [];

  constructor(data?: PartialMessage<GetTodoListResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "todo.GetTodoListResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "count", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "todos", kind: "message", T: Todo, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetTodoListResponse {
    return new GetTodoListResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetTodoListResponse {
    return new GetTodoListResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetTodoListResponse {
    return new GetTodoListResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetTodoListResponse | PlainMessage<GetTodoListResponse> | undefined, b: GetTodoListResponse | PlainMessage<GetTodoListResponse> | undefined): boolean {
    return proto3.util.equals(GetTodoListResponse, a, b);
  }
}

